import json
from pathlib import Path
from common.stream import Stream
from common.task import Job
from common.util import traverse_dir

def parse_flowfeat_output(feat_path):

    f = open(feat_path)
    j = json.load(f)
    streams = []

    feats = j["feats"]
    for feat in feats:
        stream = Stream()
        stream.setup(feat["src_ip"], feat["src_port"], feat["dest_ip"], feat["dest_port"])
        streams.append(stream.__dict__)

    p = Path(feat_path)
    streams_filename = p.stem + "_flowfeat_streams.json"
    f2 = open(streams_filename, "w")
    f2.write(json.dumps(streams, indent=4))


def parse_joy_output(feat_path):
    """
    Parse feature file generated by Joy, output number of TLS streams and certs,
    :param feat_path:
    :return:
    """

    p = Path(feat_path)

    f = open(feat_path)
    lines = f.readlines()
    streams = []

    tls_num = 0
    cert_num = 0

    lines = lines[1:]   #skip first line
    for line in lines:
        j = json.loads(line)
        if "tls" in j:
            s = j["tls"]
            stream = Stream()
            stream.setup(j["sa"], j["sp"], j["da"], j["dp"])
            streams.append(stream.__dict__)

            tls_num += 1
            if "s_cert" in s:
                cert_num += len(s["s_cert"])

    filename = p.name
    print("Pcap: %s, TLS streams: %d, Certs:%d" % (filename, tls_num, cert_num))

    # streams_filename = p.stem + "_joy_streams.json"
    # f2 = open(streams_filename, "w")
    # f2.write(json.dumps(streams, indent=4))

    return 0

def compare_streams(joy_path, flowfeat_path):

    f1 = open(joy_path)
    f2 = open(flowfeat_path)

    d1 = json.load(f1)
    d2 = json.load(f2)

    unfound_streams = []

    for s1 in d1:
        found = False
        for s2 in d2:
            if s1 == s2:
                found = True
                break
            else:
                continue

        if found == False:
            unfound_streams.append(s1)

    f = open("unfound.json", "w")
    f.write(json.dumps(unfound_streams, indent=4))

    print(len(unfound_streams))

if __name__ == '__main__':

    pcap_path = "/opt/pcaps/small_tests"
    pcap_files = traverse_dir(pcap_path)
    num = len(pcap_files)

    joy_job = Job()
    s = joy_job.do_job_joy(pcap_path)

    zeek_job = Job()
    k = zeek_job.do_job_zeek(pcap_path)

    print("===== Summary =====")
    print("Target: %s, num:%d" % (pcap_path, num))
    print(s)
    print(k)